{"version":3,"sources":["Components/Statistics/Statistics.module.css","Components/Section/Section.module.css","Components/FeedbackOptions/FeedbackOptions.module.css","Components/Notification/Notification.module.css","Components/Feedback/Feedback.module.css","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Section/Section.jsx","Components/Statistics/Statistics.jsx","Components/Notification/Notification.jsx","Components/Feedback/Feedback.jsx","App.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","className","s","button","type","onClick","Section","title","children","wrapper","mainTitle","Statistics","good","neutral","bad","totalFeedback","positivePercentage","positive","Notification","message","Feedback","state","incrementGood","setState","prevState","incrementNeutral","incrementBad","countTotalFeedback","Object","values","reduce","acc","currentValue","countPositiveFeedbackPercentage","Percentage","map","value","Math","round","container","this","Number","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51e727bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"Statistics_options__1EB7E\",\"good\":\"Statistics_good__uPTkR\",\"neutral\":\"Statistics_neutral__2rHn7\",\"bad\":\"Statistics_bad__3rauT\",\"positive\":\"Statistics_positive__3sJHD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Section_wrapper__1fvnj\",\"mainTitle\":\"Section_mainTitle__3B8I9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__32oPC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notification_title__13Tli\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Feedback_container__1aCHD\"};","import PropTypes from \"prop-types\";\r\nimport s from \"./FeedbackOptions.module.css\";\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <button className={s.button} type=\"button\" onClick={onLeaveFeedback}>\r\n      {options}\r\n    </button>\r\n  );\r\n}\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.string.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Section.module.css\";\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section className={s.wrapper}>\r\n      <h2 className={s.mainTitle}>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Statistics.module.css\";\r\nfunction Statistics({ good, neutral, bad, totalFeedback, positivePercentage }) {\r\n  return (\r\n    <section>\r\n      <p className={s.options + \" \" + s.good}>\r\n        Good: <span>{good}</span>\r\n      </p>\r\n      <p className={s.options + \" \" + s.neutral}>\r\n        Neutral: <span>{neutral}</span>\r\n      </p>\r\n      <p className={s.options + \" \" + s.bad}>\r\n        Bad: <span>{bad}</span>\r\n      </p>\r\n      <p className={s.options}>\r\n        Total: <span>{totalFeedback}</span>\r\n      </p>\r\n      <p className={s.options + \" \" + s.positive}>\r\n        Positive feedback:\r\n        <span>{positivePercentage}%</span>\r\n      </p>\r\n    </section>\r\n  );\r\n}\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  totalFeedback: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\nexport default Statistics;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Notification.module.css\";\r\nfunction Notification({ message }) {\r\n  return <p className={s.title}>{message}</p>;\r\n}\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import { Component } from \"react\";\r\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\r\nimport Section from \"../Section/Section\";\r\nimport Statistics from \"../Statistics/Statistics\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport s from \"./Feedback.module.css\";\r\n\r\nclass Feedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  incrementGood = () => {\r\n    this.setState((prevState) => ({\r\n      good: prevState.good + 1,\r\n    }));\r\n  };\r\n\r\n  incrementNeutral = () => {\r\n    this.setState((prevState) => ({\r\n      neutral: prevState.neutral + 1,\r\n    }));\r\n  };\r\n\r\n  incrementBad = () => {\r\n    this.setState((prevState) => ({\r\n      bad: prevState.bad + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return Object.values(this.state).reduce(\r\n      (acc, currentValue) => acc + currentValue,\r\n      0\r\n    );\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const arr = Object.values(this.state);\r\n    const Percentage = arr.map((value) => {\r\n      return (value * 100) / this.countTotalFeedback();\r\n    });\r\n    return Math.round(Percentage[0]);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={s.container}>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            onLeaveFeedback={this.incrementGood}\r\n            options={\"good\"}\r\n          />\r\n          <FeedbackOptions\r\n            onLeaveFeedback={this.incrementNeutral}\r\n            options={\"neutral\"}\r\n          />\r\n          <FeedbackOptions\r\n            onLeaveFeedback={this.incrementBad}\r\n            options={\"bad\"}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback() === 0 ? (\r\n            <Notification message=\"No feedback given\" />\r\n          ) : (\r\n            <Statistics\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              totalFeedback={this.countTotalFeedback()}\r\n              positivePercentage={\r\n                Number(this.countPositiveFeedbackPercentage())\r\n                  ? this.countPositiveFeedbackPercentage()\r\n                  : 0\r\n              }\r\n            />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import \"./App.css\";\nimport Feedback from \"./Components/Feedback/Feedback\";\n\nfunction App() {\n  return (\n    <div>\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}