{"version":3,"sources":["Components/Button/Button.jsx","Components/Feedback/Feedback.jsx","App.js","index.js"],"names":["Button","name","increment","type","onClick","Feedback","state","good","neutral","bad","incrementGood","setState","prevState","incrementNeutral","incrementBad","countTotalFeedback","Object","values","reduce","acc","currentValue","countTotal","Procent","map","value","Math","round","this","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAOeA,MAPf,YAAsC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UACtB,OACE,wBAAQC,KAAK,SAASC,QAASF,EAA/B,SACGD,KCoEQI,E,4MAnEbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,cAAgB,WACd,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BL,KAAMK,EAAUL,KAAO,O,EAI3BM,iBAAmB,WACjB,EAAKF,UAAS,SAACC,GAAD,MAAgB,CAC5BJ,QAASI,EAAUJ,QAAU,O,EAIjCM,aAAe,WACb,EAAKH,UAAS,SAACC,GAAD,MAAgB,CAC5BH,IAAKG,EAAUH,IAAM,O,EAIzBM,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKX,OAAOY,QAC/B,SAACC,EAAKC,GAAN,OAAuBD,EAAMC,M,EAIjCC,WAAa,WACX,IACMC,EADMN,OAAOC,OAAO,EAAKX,OACXiB,KAAI,SAACC,GACvB,OAAgB,IAARA,EAAe,EAAKT,wBAE9B,OAAOU,KAAKC,MAAMJ,EAAQ,K,4CAG5B,WACE,OACE,gCACE,uDACA,cAAC,EAAD,CAAQpB,UAAWyB,KAAKjB,cAAeT,KAAM,SAC7C,cAAC,EAAD,CAAQC,UAAWyB,KAAKd,iBAAkBZ,KAAM,YAChD,cAAC,EAAD,CAAQC,UAAWyB,KAAKb,aAAcb,KAAM,QAE5C,4CACA,uCACQ,+BAAO0B,KAAKrB,MAAMC,UAE1B,0CACW,+BAAOoB,KAAKrB,MAAME,aAE7B,sCACO,+BAAOmB,KAAKrB,MAAMG,SAEzB,wCACS,+BAAOkB,KAAKZ,0BAErB,mDACoB,iCAAOY,KAAKN,aAAZ,iB,GA7DLO,aCQRC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.736b2fb1.chunk.js","sourcesContent":["function Button({ name, increment }) {\r\n  return (\r\n    <button type=\"button\" onClick={increment}>\r\n      {name}\r\n    </button>\r\n  );\r\n}\r\nexport default Button;\r\n","import { Component } from \"react\";\r\nimport Button from \"../Button/Button\";\r\n\r\nclass Feedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  incrementGood = () => {\r\n    this.setState((prevState) => ({\r\n      good: prevState.good + 1,\r\n    }));\r\n  };\r\n\r\n  incrementNeutral = () => {\r\n    this.setState((prevState) => ({\r\n      neutral: prevState.neutral + 1,\r\n    }));\r\n  };\r\n\r\n  incrementBad = () => {\r\n    this.setState((prevState) => ({\r\n      bad: prevState.bad + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return Object.values(this.state).reduce(\r\n      (acc, currentValue) => acc + currentValue\r\n    );\r\n  };\r\n\r\n  countTotal = () => {\r\n    const arr = Object.values(this.state);\r\n    const Procent = arr.map((value) => {\r\n      return (value * 100) / this.countTotalFeedback();\r\n    });\r\n    return Math.round(Procent[0]);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Please leave feedback</h1>\r\n        <Button increment={this.incrementGood} name={\"good\"} />\r\n        <Button increment={this.incrementNeutral} name={\"neutral\"} />\r\n        <Button increment={this.incrementBad} name={\"bad\"} />\r\n\r\n        <h2>Statistics</h2>\r\n        <p>\r\n          Good: <span>{this.state.good}</span>\r\n        </p>\r\n        <p>\r\n          Neutral: <span>{this.state.neutral}</span>\r\n        </p>\r\n        <p>\r\n          Bad: <span>{this.state.bad}</span>\r\n        </p>\r\n        <p>\r\n          Total: <span>{this.countTotalFeedback()}</span>\r\n        </p>\r\n        <p>\r\n          Positive feedback:<span>{this.countTotal()}%</span>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import \"./App.css\";\nimport Feedback from \"./Components/Feedback/Feedback\";\n\nfunction App() {\n  return (\n    <div>\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}